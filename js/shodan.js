// testing
HOST = ""
Shodan_API = "JVpPlLcwNoVGA3wYdS58p0iJNH0Cm4h1"
Shodan_TEMP = ""
CVE = {}
CVE.BASE = "https://cve.circl.lu/api/cve/"
Shodan = {}
Shodan.HOSTRAW = 2
Shodan.IPRAW = 1
Shodan.ERROR = 0
Shodan.HOST = "https://api.shodan.io";
Shodan.IPINFO = "/shodan/host/";
Shodan.SEARCH = "/shodan/host/search";
Shodan.DNS = "/dns/domain/";
Shodan.key = Shodan_API;
Shodan.data_prefix = {
    "key": this.Shodan_API
}

function Shodan_getIpInfo(ip) {
    $.ajax({
        type: "get",
        url: Shodan.HOST + Shodan.IPINFO + ip,
        data: Shodan.data_prefix,
        success: function (res) {
            ShodanControl(res, true, Shodan.IPRAW)
        },
        error: function (e) {
            ShodanControl(res, false, Shodan.ERROR)
        }
    })
}

function Shodan_getDNSInfo(hostname) {
    $.ajax({
        type: "get",
        url: Shodan.HOST + Shodan.DNS + hostname,
        data: Shodan.data_prefix,
        success: function (res) {
            ip = null
            console.log(res.data)
            for (var i in res.data) {
                domain = res.data[i]
                console.log(domain)
                if (domain.subdomain == "" && domain.type == "A") {
                    ip = domain.value
                }
            }
            Shodan_getIpInfo(ip)
        },
        error: function (e) {
            ShodanControl(res, Shodan.ERROR)
        }
    })
}


function Shodan_getHostInfo(hostname) {
    var data = Object.assign({}, Shodan.data_prefix)
    data.query = "hostname:" + hostname
    $.ajax({
        type: "get",
        url: Shodan.HOST + Shodan.SEARCH,
        data: data,
        success: function (res) {
            ShodanControl(res, true, Shodan.HOSTRAW)
        },
        error: function (e) {
            ShodanControl(res, false, Shodan.ERROR)
        }
    })
}


function ShodanControl(res, isSuccess, type) {
    if (isSuccess) { //requests如果成功
        if (type == Shodan.IPRAW) { //重ip api取得raw data
            resultUI = {}
            resultUI.country_name = res.country_name
            //resultUI.
        }
    } else { //失敗要吐什麼在ui
        console.log(res)
    }

}

function ShodanUI(data) {
    host = data
    if (host.country_name) {
        items += '\
              <tr>\
                <td>Country</td>\
                <th>' + host.country_name + '</th>\
              </tr>';
    }
    el = document.getElementById('shodan_items');
    el.innerHTML = items;

}

function ShodanaddHTML(title, value) {
    return '\
                <div class="column1">\
                <h3>' + title + '</h3>\
                <p>' + value + '</p>\
              </div>' + '<div class="ui divider"></div>';
}

function GetRenderCVESummary(cve) {
    $.ajax({
        type: "get",
        url: CVE.BASE + cve,
        data: Shodan.data_prefix,
        success: function (res) {
            title = res.id
            value = res.summary
            html = ShodanaddCVEHTML(title, value)
            $("#shodan_vulns").append(html)
        },
        error: function (e) {
            ShodanControl(res, false, Shodan.ERROR)
        }
    })
}


function ShodanaddCVEHTML(title, value) {
    return '\
    <div class="column">\
	    <div class="title">' + title +
        '<a target="_blank" style="float: right; "href="https://google.com/search?q=' + title + '">\
            <img style="width: 20px;" src="/assets/images/google.png"></a>' +
        '<p style="float: right;">　|　</p>' +
        '<a target="_blank" style="float: right; "href="https://www.exploit-db.com/search?cve=' + title.slice(4) + '">\
		    <img style="width: 20px;" src="/assets/images/spider-orange.png"></a>' +
        '</div>\
    <div class="content">' + value + '</div>\
  </div>';
}
var bg = chrome.extension.getBackgroundPage();

function go(host) {
    HOST = host
    if (host) {
        console.log(host);
        var el = document.getElementById('shodan_ip');
        if (el) {
            el.innerHTML = host.ip_str;
        }

        var items = '';
        if (host.country_name) {
            items += ShodanaddHTML("Country", host.country_name)
        }
        if (host.os) {
            items += ShodanaddHTML("Operating System", host.os)
        }
        if (host.org) {
            items += ShodanaddHTML("Organization", host.org)
        }
        el = document.getElementById('shodan_items');
        el.innerHTML = items;

        // Ports
        if (host.ports) {
            var ports = '';

            // Convert the array to integers
            for (var i = 0; i < host.ports.length; i++) {
                host.ports[i] = parseInt(host.ports[i]);
            }

            host.ports.sort(function (a, b) {
                return a - b
            });
            for (var i = 0; i < host.ports.length; i++) {
                if (host.ports[i] === 80 || host.ports[i] === 8080 || host.ports[i] === 81) {
                    ports += '<li class="ui label green"><a href="http://' + host.ip_str + ':' + host.ports[i] + '" target="_blank"><span>' + host.ports[i] + '</span></a></li>';
                } else if (host.ports[i] === 443 || host.ports[i] === 8443) {
                    ports += '<li class="ui label green"><a href="https://' + host.ip_str + ':' + host.ports[i] + '" target="_blank"><span>' + host.ports[i] + '</span></a></li>';
                } else {
                    ports += '<li class="ui label"><span>' + host.ports[i] + '</span></li>';
                }
            }

            el = document.getElementById('shodan_ports');
            el.innerHTML = ports;
        }

        // Vulnerability information if available
        el = document.getElementById('shodan_vulns');
        if (host.vulns) {
            for (var i = 0; i < host.vulns.length; i++) {
                vul = host.vulns[i]
                GetRenderCVESummary(vul)
            }

        } else {
            el.innerHTML = "No CVE Found";
        }


        // Update the link to the host details page
        el = document.getElementById('host-link');
        el.href = 'https://www.shodan.io/host/' + host.ip_str;
    }
}


$(document).ready(function () {
    host = bg.getHost();
    go(host);
})

function Shodan_updateNewdomain(hostname) {
    HOSTNAME = hostname
    bg.dnsLookup(hostname, function (ip) {
        bg.hostLookup(ip, function (host) {
            go(host);
            console.log(host)
            $("#title_host").text(HOSTNAME)

            document.getElementById("host").innerHTML = host.ip_str;
            document.getElementById("domain").innerHTML = host.hostnames[0];
        })
    })
}