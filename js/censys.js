class Censys {
    constructor(api_id, api_secret) {
        this.auth = btoa(api_id + ":" + api_secret);
        this.url = "https://censys.io/api/v1/";
    }

    get(path, success = () => {}, fail = (e) => {console.log(e)}) {
        $.ajax({
            type: "get",
            url: `${this.url}${path}`,
            headers: {
                'Authorization': 'Basic ' + this.auth,
            },
            success: success,
            error: fail
        });
    }

    post(path, data, success = () => {}, fail = (e) => {console.log(e)}) {
        $.ajax({
            type: "post",
            dataType: "json",
            data: JSON.stringify(data),
            url: `${this.url}${path}`,
            headers: {
                'Authorization': 'Basic ' + this.auth,
            },
            success: success,
            error: fail
        });
    }

    // HTML Rendering Methods

    appendList(id, title, value) {
        $(`#${id}`).append(
            `<div class="column1">
                <h3>${title}</h3>
                <p>${value}</p>
            </div>
            <div class="ui divider"></div>`
        );
    }

    render(data){ // directly renders HTML
        $("#censys_items").html(data[0]);
        $("#censys_prot").html(data[1]);

        console.log("Data loaded");
    }

    // API Method Calling

    view(index, id) {
        var censys = this;
        this.get(`view/${index}/${id}`, function(res) {
            console.log("success");
            console.log(res);

            $("#censys_items").empty();
            $("#censys_prot").empty();

            if(res["metadata"] && res["metadata"]["os"])
                censys.appendList("censys_items", "OS", res["metadata"]["os"]);

            if(res["autonomous_system"]["description"])
                censys.appendList("censys_items", "Network", res["autonomous_system"]["description"]);
            console.log(res["metadata"]);

            if(res["autonomous_system"]["routed_prefix"]) {
                let routing = res["autonomous_system"]["routed_prefix"];
                if(res["autonomous_system"]["path"].length)
                    routing += " via " + res["autonomous_system"]["path"].join(", ");

                censys.appendList("censys_items", "Routing", routing);
            }

            res["protocols"] = res["protocols"].sort((a, b) => { 
                return parseInt(a.split("/")[0]) - parseInt(b.split("/")[0])
            });

            for(var protocol of res["protocols"]) {
                let content = [];
                let [port, prtcl] = protocol.split("/");
                if(prtcl == "banner" && res[port]["banner"]["banner_decoded"]) {
                    content.push(res[port]["banner"]["banner_decoded"].split("\n")[0]);
                }
                else if(prtcl == "http" && res[port]["http"]["get"]) {
                    if(res[port]["http"]["get"]["title"]) {
                        content.push(`<b>${res[port]["http"]["get"]["title"]}</b>`);
                    }

                    if(res[port]["http"]["get"]["status_line"]) {
                        content.push(res[port]["http"]["get"]["status_line"]);
                    }

                    if(res[port]["http"]["get"]["headers"]["server"]) {
                        content.push(`Server: ${res[port]["http"]["get"]["headers"]["server"]}`);
                    }
                    else if(res[port]["http"]["get"]["metadata"] && res[port]["http"]["get"]["metadata"]["description"]) {
                        content.push(`Server: ${res[port]["http"]["get"]["metadata"]["description"]}`);
                    }
                    
                }
                else if(prtcl == "https" && res[port]["https"]["get"]) {
                    if(res[port]["https"]["get"] && res[port]["https"]["get"]["title"]) {
                        content.push(`<b>${res[port]["https"]["get"]["title"]}</b>`);
                    }

                    if(res[port]["https"]["get"]["status_line"]) {
                        content.push(res[port]["https"]["get"]["status_line"]);
                    }

                    if(res[port]["https"]["get"]["headers"]["server"]) {
                        content.push(`Server: ${res[port]["https"]["get"]["headers"]["server"]}`);
                    }
                    else if(res[port]["https"]["get"]["metadata"] && res[port]["https"]["get"]["metadata"]["description"]) {
                        content.push(`Server: ${res[port]["https"]["get"]["metadata"]["description"]}`);
                    }
                    
                }
                censys.appendList("censys_prot", protocol, content.join("<br>"));
            }

            // Cache Data
            chrome.storage.local.set({"172.217.4.228": {"SAD": "AAA"}}, null)
            chrome.storage.local.set({
                [id]: {
                    "cacheTime": Date.now(),
                    "data": [$("#censys_items").html(), $("#censys_prot").html()]
                }
            }, function() {
                console.log(id, "Data cached");
            });

        });

    }

    search(index, query, page = 1, fields = [], flatten = true) {
        this.post(`search/${index}`, {
            query: query,
            page: page,
            fields: fields,
            flatten: flatten
        }, function(res) {
            console.log("success");
            console.log(res);
        });
    }

    report(index, query, field, buckets = 50) {
        this.post(`report/${index}`, {
            query: query,
            field: field,
            buckets: buckets
        }, function(res) {
            console.log("success");
            console.log(res);
        });
    }


    bulk(index, fingerprints) {
        this.post(`bulk/${index}`, {
            fingerprints: fingerprints
        }, function(res) {
            console.log("success");
            console.log(res);
        });
    }

    data() {
        this.get(`data`, function(res) {
            console.log("success");
            console.log(res);
        });
    }

    account() {
        this.get(`account`, function(res) {
            console.log("success");
            console.log(res);
        });
    }

    start(ip) {
        chrome.storage.local.get(ip, function(item) {

            if(Object.keys(item).length && Date.now() - item[ip].cacheTime < 600000) {
                censys.render(item[ip].data);
            }
            else {
                console.log(ip);
                censys.view("ipv4", ip);
            }
        });
    }
}

let api_id = "cbe21c20-5f5c-4919-a3fb-858866f6ec0a";
let api_secret = "Zkp4ZIX9sc4JtKCAoyzHyc5T4m7kGVyH";



var censys = new Censys(api_id, api_secret);
$(document).ready(function() {
    let ip = chrome.extension.getBackgroundPage().getHost().ip_str;
    censys.start(ip);
});